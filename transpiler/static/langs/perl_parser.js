/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var perl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,5],$V3=[1,18],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,11],$V8=[1,17],$V9=[1,14],$Va=[1,13],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[5,24],$Vh=[1,31],$Vi=[12,14,15,18],$Vj=[1,39],$Vk=[1,41],$Vl=[2,52],$Vm=[2,59],$Vn=[1,55],$Vo=[1,56],$Vp=[12,14,15,18,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,71],$Vq=[2,60],$Vr=[5,12,15,16,17,20,21,24,25,27,28,29,35,65,66,67,73,74],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[2,77],$VH=[1,95],$VI=[18,71],$VJ=[1,109],$VK=[1,110],$VL=[12,14,15,17,18,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,71],$VM=[5,12,15,16,17,20,21,24,25,27,28,29,35,65,66,67,72,73,74],$VN=[12,14,15,18,44,45,46,47,62,71],$VO=[12,14,15,18,44,45,46,47,48,49,50,51,52,62,71],$VP=[12,14,15,18,44,45,46,47,48,49,50,51,52,53,54,55,62,71],$VQ=[1,158];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"statement_with_semicolon":11,"if":12,"e":13,";":14,"unless":15,"while":16,"(":17,")":18,"bracket_statements":19,"do":20,"foreach":21,"var_name":22,"{":23,"}":24,"for":25,"elif":26,"sub":27,"IDENTIFIER":28,"my":29,"parameters":30,"=":31,"@_":32,"static":33,"parentheses_expr":34,"return":35,"var_names":36,"access_array":37,"++":38,"--":39,"+=":40,"-=":41,"*=":42,"/=":43,"?":44,":":45,"||":46,"&&":47,"<=":48,"<":49,">=":50,">":51,"==":52,"+":53,".":54,"-":55,"*":56,"/":57,"%":58,"not_expr":59,"!":60,"[":61,"]":62,"exprs":63,"key_values":64,"NUMBER":65,"STRING_LITERAL":66,"<>":67,"type":68,"types":69,"parameter":70,",":71,"else":72,"$":73,"@":74,"key_value":75,"=>":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"if",14:";",15:"unless",16:"while",17:"(",18:")",20:"do",21:"foreach",23:"{",24:"}",25:"for",27:"sub",28:"IDENTIFIER",29:"my",31:"=",32:"@_",33:"static",35:"return",38:"++",39:"--",40:"+=",41:"-=",42:"*=",43:"/=",44:"?",45:":",46:"||",47:"&&",48:"<=",49:"<",50:">=",51:">",52:"==",53:"+",54:".",55:"-",56:"*",57:"/",58:"%",60:"!",61:"[",62:"]",65:"NUMBER",66:"STRING_LITERAL",67:"<>",71:",",72:"else",73:"$",74:"@",76:"=>"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[6,4],[6,4],[6,2],[6,5],[6,7],[6,8],[6,11],[6,6],[6,5],[6,7],[6,12],[10,8],[10,7],[11,1],[11,2],[11,4],[11,2],[11,3],[11,3],[11,2],[11,2],[11,3],[11,3],[11,3],[11,3],[13,5],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,1],[59,2],[59,1],[37,4],[34,1],[34,3],[34,4],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[68,3],[68,4],[68,1],[70,1],[30,3],[30,1],[63,3],[63,1],[69,3],[69,1],[26,7],[26,2],[22,2],[22,2],[36,3],[36,1],[64,3],[64,1],[75,3],[75,3],[19,3],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 67:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 8:
this.$ = ["if",$$[$0-1],["statements",["semicolon",$$[$0-3]]]];
break;
case 9:
this.$ = ["unless",$$[$0-1],["statements",[["semicolon",$$[$0-3]]]]];
break;
case 10: case 83:
this.$ = ["semicolon",$$[$0-1]];
break;
case 11:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 12:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 13:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 14:
this.$ = ["for",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 15:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 16:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["unless",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["function","public","Object",$$[$0-10],$$[$0-6],$$[$0-1]];
break;
case 19:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["return",$$[$0]];
break;
case 23:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 25: case 26:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 27: case 28:
this.$ = [$$[$0],$$[$0-1]];
break;
case 29: case 30: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 47:
this.$ = ["-",$$[$0]];
break;
case 49:
this.$ = ["!", [".",$$[$0]]];
break;
case 51:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 53:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 54:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 55:
this.$ = ["initializer_list_or_parentheses",[]];
break;
case 56:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 57:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 58: case 59: case 60:
this.$ = yytext;
break;
case 62:
this.$ = [$$[$0-2],"[]"];
break;
case 63:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 65:
this.$ = ["Object", $$[$0]];
break;
case 66: case 68: case 70: case 76:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 69: case 71: case 77: case 79:
this.$ = [$$[$0]];
break;
case 72:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 73:
this.$ = ["else",$$[$0]];
break;
case 74: case 75:
this.$ = $$[$0];
break;
case 78:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 80:
this.$ = [$$[$0-2],$$[$0]]
break;
case 81:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 82:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{1:[3]},{5:[1,24]},o($Vg,[2,3],{6:3,11:4,34:12,37:15,22:16,4:25,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,25:$V6,27:$V7,28:$V8,29:$V9,35:$Va,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf}),{12:[1,26],14:[1,28],15:[1,27]},{17:[1,29]},{11:32,17:$V3,19:30,22:16,23:$Vh,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{22:33,73:$Ve,74:$Vf},{17:[1,34]},{17:[1,35]},{17:[1,36]},{28:[1,37]},o($Vi,[2,21]),{13:38,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{22:45,36:46,73:$Ve,74:$Vf},o($Vi,$Vl,{31:[1,47]}),o($Vi,$Vm,{31:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],61:$Vn}),{17:$Vo},{13:61,17:$V3,18:[1,57],22:44,28:[1,63],34:42,37:43,55:$Vj,59:40,60:$Vk,63:59,64:58,65:$Vb,66:[1,62],67:$Vd,73:$Ve,74:$Vf,75:60},o($Vp,[2,58]),o($Vp,$Vq),o($Vp,[2,61]),{28:[1,64]},{28:[1,65]},{1:[2,1]},o($Vg,[2,2]),{13:66,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:67,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vr,[2,10]),{13:68,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{16:[1,69]},{4:71,6:3,9:70,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{14:[1,72]},{17:[1,73]},{11:74,17:$V3,22:16,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:75,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:76,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{23:[1,77]},o($Vi,[2,22],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),{13:92,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vp,[2,48]),{17:$V3,22:44,28:$V8,34:93,37:43,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vp,[2,50]),o($Vp,$Vl),o($Vp,$Vm,{61:$Vn}),o($Vi,$VG,{31:[1,94],71:$VH}),o($Vi,[2,24]),{13:96,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:97,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vi,[2,27]),o($Vi,[2,28]),{13:98,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:99,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:100,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:101,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:102,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:61,17:$V3,18:[1,103],22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,63:104,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vp,[2,55]),{18:[1,105],71:[1,106]},{18:[1,107]},o($VI,[2,79]),{18:[2,69],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,71:[1,108]},o([18,44,46,47,48,49,50,51,52,53,54,55,56,57,58,71],$Vq,{76:$VJ}),{17:$Vo,45:$VK},o($VL,[2,74]),o($VL,[2,75]),{14:[1,111],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{14:[1,112],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{18:[1,113],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{17:[1,114]},{24:[1,115]},{24:[2,5]},o($VM,[2,83]),{22:116,73:$Ve,74:$Vf},{14:[1,117]},{18:[1,118],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{18:[1,119],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{29:[1,120]},{13:121,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:122,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:123,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:124,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:125,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:126,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:127,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:128,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:129,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:130,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:131,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:132,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:133,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:134,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vp,[2,47]),o($Vp,[2,49]),{13:135,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{22:137,36:136,73:$Ve,74:$Vf},o($Vi,[2,25],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,26],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,29],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,30],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,31],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,32],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,62:[1,138]},o($Vp,[2,53]),{18:[1,139]},o($Vp,[2,56]),{28:[1,142],66:[1,141],75:140},o($Vp,[2,57]),{13:61,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,63:143,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:144,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:145,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vr,[2,8]),o($Vr,[2,9]),{11:32,17:$V3,19:146,22:16,23:$Vh,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{13:147,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($VM,[2,82]),{18:[1,148]},{13:149,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{11:32,17:$V3,19:150,22:16,23:$Vh,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{23:[1,151]},{17:[1,152]},{44:$Vs,45:[1,153],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($VN,[2,34],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VN,[2,35],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VO,[2,36],{53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VO,[2,37],{53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VO,[2,38],{53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VO,[2,39],{53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VO,[2,40],{53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VP,[2,41],{56:$VD,57:$VE,58:$VF}),o($VP,[2,42],{56:$VD,57:$VE,58:$VF}),o($VP,[2,43],{56:$VD,57:$VE,58:$VF}),o($Vp,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),o($Vi,[2,23],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vi,[2,76]),o($Vi,$VG,{71:$VH}),o([12,14,15,18,31,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,71],[2,51]),o($Vp,[2,54]),o($VI,[2,78]),{76:$VJ},{45:$VK},{18:[2,68]},o($VI,[2,80],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($VI,[2,81],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vr,[2,11]),{18:[1,154],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{23:[1,155]},{14:[1,156],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},o($Vr,[2,16],{26:157,72:$VQ}),{4:71,6:3,9:159,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{22:162,30:160,70:161,73:$Ve,74:$Vf},{13:163,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{14:[1,164]},{4:71,6:3,9:165,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{11:166,17:$V3,22:16,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vr,[2,15]),{11:32,12:[1,167],17:$V3,19:168,22:16,23:$Vh,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{24:[1,169]},{18:[1,170]},{18:[2,67],71:[1,171]},o($VI,[2,65]),o([12,14,15,18,45,62,71],[2,33],{44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),o($Vr,[2,12]),{24:[1,172]},{18:[1,173]},{17:[1,174]},o($Vr,[2,73]),o($Vr,[2,17]),{31:[1,175]},{22:162,30:176,70:161,73:$Ve,74:$Vf},o($Vr,[2,13]),{23:[1,177]},{13:178,17:$V3,22:44,28:$V8,34:42,37:43,55:$Vj,59:40,60:$Vk,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{32:[1,179]},{18:[2,66]},{4:71,6:3,9:180,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{18:[1,181],44:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF},{14:[1,182]},{24:[1,183]},{11:32,17:$V3,19:184,22:16,23:$Vh,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},{4:71,6:3,9:185,11:4,12:$V0,15:$V1,16:$V2,17:$V3,20:$V4,21:$V5,22:16,25:$V6,27:$V7,28:$V8,29:$V9,34:12,35:$Va,37:15,65:$Vb,66:$Vc,67:$Vd,73:$Ve,74:$Vf},o($Vr,[2,14]),{26:186,72:$VQ},{24:[1,187]},o($Vr,[2,72]),o($Vr,[2,18])],
defaultActions: {24:[2,1],71:[2,5],143:[2,68],176:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 65
break;
case 2:return 66
break;
case 3:return "$"
break;
case 4:return "@_"
break;
case 5:return "@"
break;
case 6:return 21
break;
case 7:return "unless"
break;
case 8:return "sub"
break;
case 9:return "class"
break;
case 10:return "public"
break;
case 11:return "extends"
break;
case 12:return "implements"
break;
case 13:return "private"
break;
case 14:return "static"
break;
case 15:return 12
break;
case 16:return 72
break;
case 17:return 35
break;
case 18:return "sin"
break;
case 19:return "tan"
break;
case 20:return "cos"
break;
case 21:return 16
break;
case 22:return 25
break;
case 23:return 29
break;
case 24:return 71
break;
case 25:return 14
break;
case 26:return 54
break;
case 27:return 45
break;
case 28:return 47
break;
case 29:return 46
break;
case 30:return 50
break;
case 31:return 51
break;
case 32:return 67
break;
case 33:return 48
break;
case 34:return 49
break;
case 35:return 76
break;
case 36:return 52
break;
case 37:return 31
break;
case 38:return 58
break;
case 39:return 42
break;
case 40:return 56
break;
case 41:return 43
break;
case 42:return 57
break;
case 43:return 41
break;
case 44:return 39
break;
case 45:return 55
break;
case 46:return 38
break;
case 47:return 40
break;
case 48:return 53
break;
case 49:return '^'
break;
case 50:return 44
break;
case 51:return 23
break;
case 52:return 24
break;
case 53:return 61
break;
case 54:return 62
break;
case 55:return 17
break;
case 56:return 18
break;
case 57:return 'PI'
break;
case 58:return 'E'
break;
case 59:return 28
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|#+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@_\b)/,/^(?:@)/,/^(?:foreach\b)/,/^(?:unless\b)/,/^(?:sub\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:sin\b)/,/^(?:tan\b)/,/^(?:cos\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:my\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = perl_parser;
exports.Parser = perl_parser.Parser;
exports.parse = function () { return perl_parser.parse.apply(perl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}