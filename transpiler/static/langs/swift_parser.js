/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var swift_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,12],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[5,22,59],$V8=[5,9,14,15,18,22,23,25,26,59],$V9=[1,26],$Va=[1,31],$Vb=[1,20],$Vc=[1,22],$Vd=[1,27],$Ve=[1,32],$Vf=[1,33],$Vg=[1,25],$Vh=[1,39],$Vi=[5,9,14,15,18,22,23,25,26,59,64,65],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[5,9,12,14,15,18,22,23,25,26,34,35,36,37,38,39,40,41,42,43,44,45,46,49,53,59,64,65],$Vx=[5,9,12,14,15,18,21,22,23,25,26,32,34,35,36,37,38,39,40,41,42,43,44,45,46,49,53,59,64,65],$Vy=[2,47],$Vz=[2,71],$VA=[1,71],$VB=[2,62],$VC=[1,80],$VD=[49,53],$VE=[1,104],$VF=[1,108],$VG=[1,112],$VH=[1,111],$VI=[1,117],$VJ=[5,9,12,14,15,18,22,23,25,26,34,35,36,37,38,39,49,53,59,64,65],$VK=[5,9,12,14,15,18,22,23,25,26,34,35,36,37,38,39,40,41,42,49,53,59,64,65],$VL=[5,9,12,14,15,18,22,23,25,26,34,35,36,37,38,39,40,41,42,43,44,45,49,53,59,64,65],$VM=[12,49],$VN=[12,27,37,49,53],$VO=[1,143],$VP=[1,144];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statement_with_semicolon":8,"while":9,"(":10,"e":11,")":12,"bracket_statements":13,"for":14,"IDENTIFIER":15,"in":16,"parentheses_expr":17,"func":18,"parameters":19,"->":20,"{":21,"}":22,"if":23,"elif":24,"return":25,"var":26,"=":27,":":28,"type":29,"identifiers":30,"access_array":31,".":32,"dot_expr":33,"or":34,"and":35,"<":36,">":37,"==":38,"~=":39,"+":40,"-":41,"..":42,"*":43,"/":44,"%":45,"^":46,"not_expr":47,"named_parameters":48,",":49,"named_parameter":50,"!":51,"[":52,"]":53,"function_call":54,"parentheses_expr_":55,"NUMBER":56,"STRING_LITERAL":57,"function":58,"end":59,"exprs":60,"key_values":61,"parameter":62,"types":63,"else_if":64,"else":65,"key_value":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"while",10:"(",12:")",14:"for",15:"IDENTIFIER",16:"in",18:"func",20:"->",21:"{",22:"}",23:"if",25:"return",26:"var",27:"=",28:":",32:".",34:"or",35:"and",36:"<",37:">",38:"==",39:"~=",40:"+",41:"-",42:"..",43:"*",44:"/",45:"%",46:"^",49:",",51:"!",52:"[",53:"]",56:"NUMBER",57:"STRING_LITERAL",58:"function",59:"end",64:"else_if",65:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[6,1],[6,5],[6,5],[6,10],[6,6],[6,5],[8,2],[8,4],[8,6],[8,2],[8,3],[8,3],[8,3],[11,3],[11,3],[11,4],[11,3],[11,4],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,1],[48,3],[48,1],[50,3],[47,2],[47,1],[33,3],[33,1],[31,4],[54,3],[54,4],[55,1],[55,1],[55,1],[17,6],[17,3],[17,2],[17,3],[17,3],[17,1],[17,1],[17,1],[29,3],[29,4],[29,1],[62,3],[19,3],[19,1],[19,0],[60,3],[60,1],[63,3],[63,1],[24,6],[24,5],[24,2],[30,3],[30,1],[61,3],[61,1],[66,3],[13,3],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 41: case 61:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5: case 76:
this.$ = ["semicolon",$$[$0]];
break;
case 6:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 7:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 8:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 9:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 10:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 11:
this.$ = ["return",$$[$0]];
break;
case 12:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["initialize_var",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 14:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 15: case 16:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 18:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 20: case 22:
this.$ = [$$[$0-2],$$[$0-3],$$[$0-1]];
break;
case 21: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["-",$$[$0]];
break;
case 35: case 72:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 36: case 64: case 66: case 71: case 73:
this.$ = [$$[$0]];
break;
case 37:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 38:
this.$ = ["!", [".",$$[$0]]];
break;
case 39:
this.$ = [".", $$[$0]];
break;
case 40: case 60: case 63: case 65: case 70:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 42:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 43:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 44:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 45: case 46: case 47:
this.$ = yytext;
break;
case 48:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 49:
this.$ = ["parentheses",$$[$0-1]];
break;
case 50:
this.$ = ["initializer_list","Object",[]];
break;
case 51:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 52:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 56:
this.$ = [$$[$0-1],"[]"];
break;
case 57:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 59:
this.$ = [$$[$0], $$[$0-2]];
break;
case 62:
this.$ = [];
break;
case 67:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 68:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 69:
this.$ = ["else",$$[$0]];
break;
case 74:
this.$ = [$$[$0-2],$$[$0]]
break;
case 75:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:$V0,14:$V1,15:$V2,18:$V3,23:$V4,25:$V5,26:$V6,31:11},{1:[3]},{5:[1,13]},o($V7,[2,3],{6:3,8:4,31:11,4:14,9:$V0,14:$V1,15:$V2,18:$V3,23:$V4,25:$V5,26:$V6}),o($V8,[2,5]),{10:[1,15]},{15:[1,16]},{15:[1,17]},{10:[1,18]},{10:$V9,11:19,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{15:[1,34],30:35},{27:[1,36]},{27:[1,37],32:[1,38],52:$Vh},{1:[2,1]},o($V7,[2,2]),{10:$V9,11:40,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{16:[1,41]},{10:[1,42]},{10:$V9,11:43,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($Vi,[2,11],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),{10:$V9,11:57,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($Vw,[2,34]),{10:$V9,15:$Va,17:24,31:28,33:58,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($Vw,[2,39]),o($Vw,[2,41],{32:[1,59]}),{10:[1,60]},{10:$V9,11:61,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:65,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,53:[1,62],54:29,55:30,56:$Ve,57:[1,67],58:$Vg,60:63,61:64,66:66},o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,46],{10:[1,68],52:$Vh}),o($Vx,[2,45]),o($Vx,$Vy),o($Vi,$Vz,{27:[1,69],28:[1,70],49:$VA}),o($Vi,[2,14]),{10:$V9,11:72,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:73,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,15:$Va,17:24,31:28,33:74,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:75,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{12:[1,76],34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{10:$V9,15:$Va,17:77,31:28,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{12:$VB,15:$VC,19:78,62:79},{12:[1,81],34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{10:$V9,11:82,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:83,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:85,15:$Va,17:24,27:[1,84],31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:87,15:$Va,17:24,27:[1,86],31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:88,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:89,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:90,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:91,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:92,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:93,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:94,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:95,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:96,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($Vw,[2,33]),o($Vw,[2,38]),{10:$V9,15:$Va,17:24,31:28,33:97,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{12:$VB,15:$VC,19:98,62:79},{12:[1,99],34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},o($Vx,[2,50]),{53:[1,100]},{49:[1,102],53:[1,101]},{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,49:[1,103],53:[2,64]},o($VD,[2,73]),o([32,34,35,36,37,38,39,40,41,42,43,44,45,46,49,53],$Vy,{28:$VE}),{12:[1,105],15:$VF,48:106,50:107},{10:$V9,11:109,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{15:$VG,29:110,52:$VH},{15:[1,114],30:113},o($Vi,[2,15],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($Vi,[2,16],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($Vi,[2,17]),{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,53:[1,115]},{8:118,13:116,15:$V2,21:$VI,25:$V5,26:$V6,31:11},{8:118,13:119,15:$V2,21:$VI,25:$V5,26:$V6,31:11},{12:[1,120]},{12:[2,61],49:[1,121]},{28:[1,122]},{8:118,13:123,15:$V2,21:$VI,25:$V5,26:$V6,31:11},o([5,9,12,14,15,18,22,23,25,26,34,49,53,59,64,65],[2,18],{35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o([5,9,12,14,15,18,22,23,25,26,34,35,49,53,59,64,65],[2,19],{36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),{10:$V9,11:124,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($VJ,[2,21],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),{10:$V9,11:125,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($VJ,[2,25],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VJ,[2,23],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VJ,[2,24],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VK,[2,26],{43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VK,[2,27],{43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VK,[2,28],{43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VL,[2,29],{46:$Vv}),o($VL,[2,30],{46:$Vv}),o($VL,[2,31],{46:$Vv}),o($Vw,[2,32]),o($Vw,[2,40]),{12:[1,126]},o($Vx,[2,49]),o($Vx,[2,51]),o($Vx,[2,52]),{57:[1,128],66:127},{10:$V9,11:65,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg,60:129},{10:$V9,11:130,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($Vx,[2,43]),{12:[1,131],49:[1,132]},o($VM,[2,36]),{28:[1,133]},o($Vi,[2,12],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),{27:[1,134]},{15:$VG,29:135,52:$VH},o($VN,[2,58],{36:[1,136]}),o($Vi,[2,70]),o($Vi,$Vz,{49:$VA}),o([5,9,12,14,15,18,21,22,23,25,26,27,32,34,35,36,37,38,39,40,41,42,43,44,45,46,49,53,59,64,65],[2,42]),o($V8,[2,6]),{4:138,6:3,7:137,8:4,9:$V0,14:$V1,15:$V2,18:$V3,23:$V4,25:$V5,26:$V6,31:11},o($Vi,[2,76]),o($V8,[2,7]),{20:[1,139]},{12:$VB,15:$VC,19:140,62:79},{15:$VG,29:141,52:$VH},o($V8,[2,10],{24:142,64:$VO,65:$VP}),o($VJ,[2,20],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VJ,[2,22],{40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),{4:138,6:3,7:145,8:4,9:$V0,14:$V1,15:$V2,18:$V3,23:$V4,25:$V5,26:$V6,31:11},o($VD,[2,72]),{28:$VE},{53:[2,63]},o($VD,[2,74],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($Vx,[2,44]),{15:$VF,50:146},{10:$V9,11:147,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{10:$V9,11:148,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},{53:[1,149]},{15:$VG,29:150,52:$VH},{22:[1,151]},o([22,59],[2,4]),{15:[1,152]},{12:[2,60]},o($VM,[2,59]),o($V8,[2,9]),{10:[1,153]},{8:118,13:154,15:$V2,21:$VI,25:$V5,26:$V6,31:11},{59:[1,155]},o($VM,[2,35]),o($VM,[2,37],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($Vi,[2,13],{34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv}),o($VN,[2,56]),{37:[1,156]},o($Vi,[2,75]),{21:[1,157]},{10:$V9,11:158,15:$Va,17:24,31:28,33:23,41:$Vb,47:21,51:$Vc,52:$Vd,54:29,55:30,56:$Ve,57:$Vf,58:$Vg},o($V8,[2,69]),o($Vx,[2,48]),o($VN,[2,57]),{4:138,6:3,7:159,8:4,9:$V0,14:$V1,15:$V2,18:$V3,23:$V4,25:$V5,26:$V6,31:11},{12:[1,160],34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{22:[1,161]},{8:118,13:162,15:$V2,21:$VI,25:$V5,26:$V6,31:11},o($V8,[2,8]),o($V8,[2,68],{24:163,64:$VO,65:$VP}),o($V8,[2,67])],
defaultActions: {13:[2,1],129:[2,63],140:[2,60]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 56
break;
case 2:return 57
break;
case 3:return "$"
break;
case 4:return "func"
break;
case 5:return "end"
break;
case 6:return "then"
break;
case 7:return 26
break;
case 8:return 23
break;
case 9:return 65
break;
case 10:return 25
break;
case 11:return 9
break;
case 12:return 14
break;
case 13:return 'repeat'
break;
case 14:return 'until'
break;
case 15:return 'of'
break;
case 16:return 'not'
break;
case 17:return 49
break;
case 18:return 42
break;
case 19:return 32
break;
case 20:return 28
break;
case 21:return 35
break;
case 22:return 34
break;
case 23:return 37
break;
case 24:return 36
break;
case 25:return 39
break;
case 26:return 38
break;
case 27:return 27
break;
case 28:return '*='
break;
case 29:return 43
break;
case 30:return 44
break;
case 31:return 45
break;
case 32:return 20
break;
case 33:return 41
break;
case 34:return 40
break;
case 35:return 46
break;
case 36:return 21
break;
case 37:return 22
break;
case 38:return 52
break;
case 39:return 53
break;
case 40:return 10
break;
case 41:return 12
break;
case 42:return '_'
break;
case 43:return 'pairs'
break;
case 44:return 16
break;
case 45:return 'do'
break;
case 46:return 15
break;
case 47:return 5
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:func\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:var\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:->)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = swift_parser;
exports.Parser = swift_parser.Parser;
exports.parse = function () { return swift_parser.parse.apply(swift_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}