/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cpp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,24],$V2=[1,19],$V3=[1,16],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,11],$Va=[1,13],$Vb=[1,14],$Vc=[1,17],$Vd=[1,18],$Ve=[1,22],$Vf=[1,21],$Vg=[5,18,44],$Vh=[5,12,13,15,16,18,27,32,33,35,36,39,44,68,69,74,75,89,92],$Vi=[1,30],$Vj=[1,48],$Vk=[1,45],$Vl=[1,41],$Vm=[1,49],$Vn=[1,43],$Vo=[1,47],$Vp=[1,51],$Vq=[2,116],$Vr=[1,62],$Vs=[19,30],$Vt=[16,17,28,49,60,78,94,95],$Vu=[2,115],$Vv=[15,16,20,21,22,48,89,92],$Vw=[2,135],$Vx=[1,80],$Vy=[1,81],$Vz=[1,87],$VA=[1,89],$VB=[1,88],$VC=[1,90],$VD=[1,84],$VE=[1,83],$VF=[1,85],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,82],$VL=[1,86],$VM=[1,95],$VN=[18,19,24,30,57,58,59,60,61,62,63,64,65,66,67,78,81,82,83],$VO=[1,96],$VP=[2,98],$VQ=[1,101],$VR=[1,100],$VS=[18,19,24,28,30,57,58,59,60,61,62,63,64,65,66,67,72,78,81,82,83,87],$VT=[1,115],$VU=[1,118],$VV=[5,12,13,15,16,18,27,32,33,35,36,39,44,68,69,74,75,89,92,97],$VW=[2,123],$VX=[1,140],$VY=[1,160],$VZ=[1,165],$V_=[1,180],$V$=[18,19,30],$V01=[18,19,24,30,61,62,78,81],$V11=[18,19,24,30,57,58,61,62,63,78,81,82],$V21=[18,19,24,30,57,58,59,60,61,62,63,78,81,82],$V31=[18,19,24,30,57,58,59,60,61,62,63,64,65,78,81,82],$V41=[18,30],$V51=[18,30,78],$V61=[57,58,59,60,61,62,63,64,65,66,67,81,82,83],$V71=[2,72],$V81=[1,230],$V91=[1,234],$Va1=[30,78],$Vb1=[18,19,24,30,57,58,59,60,61,62,63,64,65,66,67,72,78,81,82,83],$Vc1=[18,46],$Vd1=[2,73],$Ve1=[12,13,16,18,48,89,92],$Vf1=[1,331],$Vg1=[18,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,";":19,"abstract":20,"interface":21,"enum":22,"identifiers":23,":":24,"implements":25,"statement_with_semicolon":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"do":32,"switch":33,"case_statements":34,"for":35,"foreach":36,"type":37,"in":38,"if":39,"elif":40,"parameters":41,"case_statement":42,"case":43,"break":44,"case_statements_":45,"default":46,"=":47,"static":48,"operator":49,"OPERATOR":50,"+=":51,"-=":52,"*=":53,"/=":54,"++":55,"--":56,"<=":57,">=":58,"<":59,">":60,"&&":61,"||":62,"==":63,"+":64,"-":65,"*":66,"/":67,"return":68,"const":69,"exprs":70,"access_array":71,".":72,"dot_expr":73,"function_call":74,"cout":75,"parentheses_expr":76,"key_values":77,",":78,"key_value":79,"STRING_LITERAL":80,"?":81,"!=":82,"%":83,"initializer_list":84,"[":85,"access_arr":86,"]":87,"new":88,"Dictionary":89,"NUMBER":90,"types":91,"Object":92,"parameter":93,"&":94,"...":95,"expr":96,"else":97,"add":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:";",20:"abstract",21:"interface",22:"enum",24:":",25:"implements",27:"while",28:"(",30:")",32:"do",33:"switch",35:"for",36:"foreach",38:"in",39:"if",43:"case",44:"break",46:"default",47:"=",48:"static",49:"operator",51:"+=",52:"-=",53:"*=",54:"/=",55:"++",56:"--",57:"<=",58:">=",59:"<",60:">",61:"&&",62:"||",63:"==",64:"+",65:"-",66:"*",67:"/",68:"return",69:"const",72:".",74:"function_call",75:"cout",78:",",80:"STRING_LITERAL",81:"?",82:"!=",83:"%",85:"[",87:"]",88:"new",89:"Dictionary",90:"NUMBER",92:"Object",94:"&",95:"...",97:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,9],[14,8],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,8],[6,6],[6,5],[6,8],[42,6],[45,2],[45,1],[34,4],[34,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,9],[10,8],[10,9],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[26,4],[26,7],[77,3],[77,1],[79,5],[29,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,4],[29,4],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[73,3],[73,3],[73,1],[71,4],[84,4],[84,5],[84,4],[84,5],[76,3],[76,10],[76,1],[76,3],[76,4],[76,1],[76,1],[76,1],[37,3],[37,4],[37,1],[37,1],[37,1],[93,3],[93,3],[93,4],[93,2],[41,3],[41,1],[41,0],[86,3],[86,1],[70,3],[70,1],[96,2],[96,1],[91,3],[91,1],[40,7],[40,2],[23,3],[23,1],[98,3],[98,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 98: case 122: case 125:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-5],"public",$$[$0-4],$$[$0-2]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 139:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 20:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 24:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 34:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 36:
this.$ = ["static_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["instance_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["instance_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 56:
this.$ = ["return",$$[$0]];
break;
case 57:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 59:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 60:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 61:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 62: case 63:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 64: case 65:
this.$ = [$$[$0],$$[$0-1]];
break;
case 66: case 67: case 68: case 69: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 88: case 89: case 90: case 91: case 92:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 70:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 72: case 87:
this.$ = ["<<",$$[$0-3],$$[$0]];
break;
case 73:
this.$ = ["<<",["<<",$$[$0-6],$$[$0-3]],$$[$0]];
break;
case 74:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 75: case 127: case 129: case 131: case 135: case 137:
this.$ = [$$[$0]];
break;
case 76: case 113:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 77:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 86:
this.$ = [">>",$$[$0-3],$$[$0]];
break;
case 94:
this.$ = ["-",$$[$0]];
break;
case 95:
this.$ = [".", $$[$0]];
break;
case 96: case 97: case 121: case 124: case 126: case 130: case 134: case 136:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 99:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 100:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 101:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 102:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 103:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 104: case 138:
this.$= $$[$0-1];
break;
case 105:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 107:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 108:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 109: case 110: case 111:
this.$ = yytext;
break;
case 112:
this.$ = [$$[$0-2],"[]"];
break;
case 117:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 118:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 119:
this.$ = ["optional_arg",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 120:
this.$ = [$$[$0-1],$$[$0]];
break;
case 123:
this.$= []
break;
case 128:
this.$ = ["function_call_ref",$$[$0]];
break;
case 132:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 133:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{1:[3]},{5:[1,25]},o($Vg,[2,3],{6:3,26:4,14:5,37:12,71:15,11:20,4:26,12:$V0,13:$V1,15:$V2,16:$V3,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,39:$V9,68:$Va,69:$Vb,74:$Vc,75:$Vd,89:$Ve,92:$Vf}),{19:[1,27]},o($Vh,[2,17]),{28:[1,28]},{16:$V3,17:$Vi,26:31,31:29,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{28:[1,33]},{28:[1,34]},{28:[1,35]},{28:[1,36]},{16:[1,37],23:38},{16:$Vj,28:$Vk,29:39,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vp,37:50,89:$Ve,92:$Vf},{47:[1,52]},{16:$Vq,47:[1,53],51:[1,56],52:[1,57],53:[1,58],54:[1,59],55:[1,54],56:[1,55],59:$Vr,72:[1,60],85:[1,61]},o($Vs,[2,71]),{59:[1,63]},{16:[1,64]},{15:[1,68],20:[1,65],21:[1,66],22:[1,67]},o($Vt,[2,114]),o([16,49,60,78,94,95],$Vu),o($Vv,[2,8]),o($Vv,[2,9]),{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,16]),{16:$Vj,28:$Vk,29:69,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{27:[1,70]},{4:72,6:3,9:71,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{19:[1,73]},{16:[1,74],23:38},{16:$Vj,28:$Vk,29:75,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$V3,26:76,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{16:$Vp,37:77,89:$Ve,92:$Vf},{16:$Vj,28:$Vk,29:78,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{19:$Vw,28:[1,79],47:$Vx,78:$Vy},o($Vs,[2,61]),o($Vs,[2,56],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($VN,[2,93],{72:$VO}),{16:$Vj,28:$Vk,29:97,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($VN,[2,95]),{16:$Vp,37:98,89:[1,99],92:$Vf},o($VN,$VP,{28:$VQ,72:$VR}),{16:$Vj,28:$Vk,29:102,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($VS,[2,106]),o($VS,[2,109]),o($VS,[2,110],{85:[1,103]}),o($VS,[2,111]),{16:[1,104],23:105},o($Vt,$Vq,{59:$Vr,85:[1,106]}),{16:$Vj,28:$Vk,29:107,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:108,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($Vs,[2,64]),o($Vs,[2,65]),{16:$Vj,28:$Vk,29:109,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:110,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:111,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:112,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,71:46,73:113,76:44,80:$Vm,84:114,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,71:46,76:117,80:$Vm,86:116,87:$VT,88:$VU,90:$Vo},{16:$Vp,37:120,89:$Ve,91:119,92:$Vf},{59:[1,121]},{17:[1,122]},{15:[1,123]},{16:[1,124]},{16:[1,125]},{16:[1,126]},{30:[1,127],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{28:[1,128]},{18:[1,129]},o([18,44],[2,5]),o($VV,[2,139]),o($Vs,$Vw,{47:$Vx,78:$Vy}),{30:[1,130],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{19:[1,131]},{16:[1,132]},{30:[1,133],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{16:$Vp,30:$VW,37:136,41:134,89:$Ve,92:$Vf,93:135},{16:$Vj,17:[1,137],28:$Vk,29:138,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$VX,23:139},{16:$Vj,28:$Vk,29:141,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:142,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:143,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:144,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:145,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:146,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:147,59:[1,148],65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:149,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:150,60:[1,151],65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:152,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:153,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:154,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:155,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:156,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,71:46,73:157,76:44,80:$Vm,84:114,88:$Vn,90:$Vo},o($VN,[2,94]),{17:[1,158],28:[1,159]},o([17,28],$Vu,{59:$VY}),{16:$Vj,28:$Vk,71:46,73:161,76:44,80:$Vm,84:114,88:$Vn,90:$Vo},{16:$Vj,28:$Vk,29:166,30:[1,162],65:$Vl,70:163,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo,94:$VZ,96:164},{30:[1,167],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{16:$Vj,28:$Vk,71:46,76:117,80:$Vm,86:116,88:$VU,90:$Vo},o($Vs,$Vw,{47:[1,168],78:$Vy}),o($Vs,[2,58]),{87:$VT},o($Vs,[2,62],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,63],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,66],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,67],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,68],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,69],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,70]),{72:$VO},o($Vt,[2,112]),{87:[1,169]},{28:$VQ,78:[1,170],87:[2,125]},{89:[1,171]},{60:[1,172]},{60:[2,131],78:[1,173]},{16:$Vj,28:$Vk,29:175,65:$Vl,71:46,73:42,76:174,80:$Vm,84:40,88:$Vn,90:$Vo},{7:176,8:177,10:178,11:179,12:$V0,13:$V1,16:$Vp,37:181,48:$V_,89:$Ve,92:$Vf},{16:[1,182]},{17:[1,183]},{17:[1,184]},{24:[1,185],25:[1,186]},{16:$V3,17:$Vi,26:31,31:187,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{16:$Vj,28:$Vk,29:188,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($VV,[2,138]),{17:[1,189]},{16:$Vj,28:$Vk,29:190,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{38:[1,191]},{16:$V3,17:$Vi,26:31,31:192,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{30:[1,193]},{30:[2,122],78:[1,194]},{16:[1,197],94:[1,195],95:[1,196]},{16:$Vj,28:$Vk,29:166,65:$Vl,70:198,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo,94:$VZ,96:164},o($Vs,[2,60],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($V$,[2,134]),o($V$,$Vw,{78:$Vy}),{24:[1,199],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},o($V01,[2,78],{57:$Vz,58:$VA,59:$VB,60:$VC,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,82:$VL,83:$VM}),o($V01,[2,79],{57:$Vz,58:$VA,59:$VB,60:$VC,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,82:$VL,83:$VM}),o($V11,[2,80],{59:$VB,60:$VC,64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($V11,[2,81],{59:$VB,60:$VC,64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($V11,[2,82],{59:$VB,60:$VC,64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($V21,[2,83],{64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),{16:$Vj,28:$Vk,29:200,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($V11,[2,84],{59:$VB,60:$VC,64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($V21,[2,85],{64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),{16:$Vj,28:$Vk,29:201,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($V31,[2,88],{66:$VI,67:$VJ,83:$VM}),o($V31,[2,89],{66:$VI,67:$VJ,83:$VM}),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92]),o($VN,[2,96]),{16:$Vj,18:[1,202],28:$Vk,29:166,65:$Vl,70:203,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo,94:$VZ,96:164},{16:$Vj,28:$Vk,29:166,30:[1,204],65:$Vl,70:205,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo,94:$VZ,96:164},{16:$Vp,37:206,89:$Ve,92:$Vf},o($VN,[2,97]),o($VS,[2,107]),{30:[1,207]},o($V41,[2,127],{78:[1,208]}),{16:$Vj,28:$Vk,29:209,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($V51,[2,129],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($VS,[2,104]),{16:$Vj,28:$Vk,29:210,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o([18,19,24,28,30,47,57,58,59,60,61,62,63,64,65,66,67,72,78,81,82,83,87],[2,99]),{16:$Vj,28:$Vk,71:46,76:117,80:$Vm,86:211,88:$VU,90:$Vo},{59:$VY},o($Vt,[2,113]),{16:$Vp,37:120,89:$Ve,91:212,92:$Vf},o($V61,$VP,{19:$V71,30:$V71,28:$VQ,72:$VR}),{57:$Vz,58:$VA,59:[1,213],60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{18:[1,214]},{18:[2,4]},{8:215,10:178,11:179,12:$V0,13:$V1,16:$Vp,18:[2,7],37:181,48:$V_,89:$Ve,92:$Vf},{16:$Vp,37:216,48:[1,217],89:$Ve,92:$Vf},{16:$Vp,37:218,89:$Ve,92:$Vf},{16:[1,219],49:[1,220]},{17:[1,221]},{7:222,8:177,10:178,11:179,12:$V0,13:$V1,16:$Vp,37:181,48:$V_,89:$Ve,92:$Vf},{16:$VX,23:223},{12:[1,224]},{16:[1,225]},o($Vh,[2,18]),{30:[1,226],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{34:227,42:229,43:$V81,45:228},{19:[1,231],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{16:[1,232]},o($Vh,[2,24],{40:233,97:$V91}),{17:[1,235]},{16:$Vp,30:$VW,37:136,41:236,89:$Ve,92:$Vf,93:135},{16:[1,237]},{16:[1,238]},o($Va1,[2,120],{47:[1,239]}),{18:[1,240]},{16:$Vj,28:$Vk,29:241,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($V21,[2,87],{64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($V21,[2,86],{64:$VG,65:$VH,66:$VI,67:$VJ,83:$VM}),o($Vb1,[2,100]),{18:[1,242]},o($Vb1,[2,102]),{30:[1,243]},{78:[1,244]},o($VS,[2,108]),{16:$Vj,28:$Vk,29:166,65:$Vl,70:245,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo,94:$VZ,96:164},o($V51,[2,128],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vs,[2,57],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),{87:[2,124]},{60:[2,130]},{16:$Vj,28:$Vk,29:147,59:[1,246],65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{19:[1,247]},{18:[2,6]},{16:[1,248]},{16:$Vp,37:249,89:$Ve,92:$Vf},{16:[1,250]},{28:[1,251]},{50:252,51:[1,253],52:[1,254],53:[1,255],54:[1,256],55:[1,257],56:[1,258],57:[1,259],58:[1,260],59:[1,261],60:[1,262],61:[1,263],62:[1,264],63:[1,265],64:[1,266],65:[1,267],66:[1,268],67:[1,269]},{7:270,8:177,10:178,11:179,12:$V0,13:$V1,16:$Vp,37:181,48:$V_,89:$Ve,92:$Vf},{18:[1,271]},{18:[1,272]},{16:[1,273]},{17:[1,274]},{19:[1,275]},{18:[1,276]},{18:[2,30],46:[1,277]},o($Vc1,[2,28],{42:229,45:278,43:$V81}),{16:$Vj,28:$Vk,29:279,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$V3,26:280,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{30:[1,281]},o($Vh,[2,23]),{16:$V3,17:$Vi,26:31,31:283,37:32,39:[1,282],68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{4:72,6:3,9:284,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{30:[2,121]},o($Va1,[2,117]),o($Va1,[2,118]),{16:$Vj,28:$Vk,29:285,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($Vs,[2,59]),o([18,19,24,30,78],[2,77],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),o($Vb1,[2,101]),o($Vb1,[2,103]),{16:$Vp,37:286,89:$Ve,92:$Vf},o($V41,[2,126]),{16:$Vj,28:$Vk,29:200,65:$Vl,71:46,73:42,76:287,80:$Vm,84:40,88:$Vn,90:$Vo},o($Vh,[2,10]),{19:[1,289],28:[1,290],47:[1,288]},{16:[1,291]},{28:[1,292]},{16:$Vp,30:$VW,37:136,41:293,89:$Ve,92:$Vf,93:135},{28:[1,294]},{28:[2,39]},{28:[2,40]},{28:[2,41]},{28:[2,42]},{28:[2,43]},{28:[2,44]},{28:[2,45]},{28:[2,46]},{28:[2,47]},{28:[2,48]},{28:[2,49]},{28:[2,50]},{28:[2,51]},{28:[2,52]},{28:[2,53]},{28:[2,54]},{28:[2,55]},{18:[1,295]},o($Vh,[2,12]),o($Vh,[2,13]),{17:[1,296]},{7:297,8:177,10:178,11:179,12:$V0,13:$V1,16:$Vp,37:181,48:$V_,89:$Ve,92:$Vf},o($Vh,[2,19]),o($Vh,[2,20]),{24:[1,298]},o($Vc1,[2,27]),{24:[1,299],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{30:[1,300]},{16:$V3,17:$Vi,26:31,31:301,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{28:[1,302]},o($Vh,[2,133]),{18:[1,303]},o($Va1,[2,119],{57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM}),{60:[1,304]},o($V61,$VP,{19:$Vd1,30:$Vd1,28:$VQ,72:$VR}),{16:$Vj,28:$Vk,29:305,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($Ve1,[2,32]),{16:$Vp,30:$VW,37:136,41:306,89:$Ve,92:$Vf,93:135},{28:[1,308],47:[1,307]},{16:$Vp,30:$VW,37:136,41:309,89:$Ve,92:$Vf,93:135},{30:[1,310]},{16:$Vp,30:$VW,37:136,41:311,89:$Ve,92:$Vf,93:135},o($Vh,[2,11]),{7:312,8:177,10:178,11:179,12:$V0,13:$V1,16:$Vp,37:181,48:$V_,89:$Ve,92:$Vf},{18:[1,313]},{4:72,6:3,9:314,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{4:72,6:3,9:315,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{16:$V3,17:$Vi,26:31,31:316,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},o($Vh,[2,22]),{16:$Vj,28:$Vk,29:317,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($Vh,[2,25]),{17:[1,318]},{19:[1,319],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{30:[1,320]},{16:$Vj,28:$Vk,29:321,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},{16:$Vp,30:$VW,37:136,41:322,89:$Ve,92:$Vf,93:135},{30:[1,323]},{17:[1,324]},{30:[1,325]},{18:[1,326]},o($Vh,[2,15]),{18:[2,29]},{44:[1,327]},o($Vh,[2,21]),{30:[1,328],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{17:$Vf1,77:329,79:330},o($Ve1,[2,31]),{19:[1,332]},{19:[1,333],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},{30:[1,334]},{17:[1,335]},{4:72,6:3,9:336,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{17:[1,337]},o($Vh,[2,14]),{19:[1,338]},{16:$V3,17:$Vi,26:31,31:339,37:32,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{18:[1,340],78:[1,341]},o($Vg1,[2,75]),{80:[1,342]},o($Ve1,[2,35]),o($Ve1,[2,33]),{19:[1,343]},{4:72,6:3,9:344,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},{18:[1,345]},{4:72,6:3,9:346,11:20,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,35:$V7,36:$V8,37:12,39:$V9,68:$Va,69:$Vb,71:15,74:$Vc,75:$Vd,89:$Ve,92:$Vf},o([18,43,46],[2,26]),{40:347,97:$V91},o($VS,[2,105]),{17:$Vf1,79:348},{78:[1,349]},o($Ve1,[2,34]),{18:[1,350]},o($Ve1,[2,37]),{18:[1,351]},o($Vh,[2,132]),o($Vg1,[2,74]),{16:$Vj,28:$Vk,29:352,65:$Vl,71:46,73:42,76:44,80:$Vm,84:40,88:$Vn,90:$Vo},o($Ve1,[2,36]),o($Ve1,[2,38]),{18:[1,353],57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,81:$VK,82:$VL,83:$VM},o($Vg1,[2,76])],
defaultActions: {25:[2,1],177:[2,4],211:[2,124],212:[2,130],215:[2,6],236:[2,121],253:[2,39],254:[2,40],255:[2,41],256:[2,42],257:[2,43],258:[2,44],259:[2,45],260:[2,46],261:[2,47],262:[2,48],263:[2,49],264:[2,50],265:[2,51],266:[2,52],267:[2,53],268:[2,54],269:[2,55],314:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 90
break;
case 2:return 80
break;
case 3:return "class"
break;
case 4:return "cout"
break;
case 5:return "switch"
break;
case 6:return 43
break;
case 7:return "break"
break;
case 8:return 46
break;
case 9:return "public"
break;
case 10:return "extends"
break;
case 11:return "operator"
break;
case 12:return "implements"
break;
case 13:return "Dictionary"
break;
case 14:return "private"
break;
case 15:return "static"
break;
case 16:return "if"
break;
case 17:return 32
break;
case 18:return "in"
break;
case 19:return "else"
break;
case 20:return "return"
break;
case 21:return "while"
break;
case 22:return "foreach"
break;
case 23:return "const"
break;
case 24:return "for"
break;
case 25:return "new"
break;
case 26:return 78
break;
case 27:return 19
break;
case 28:return 72
break;
case 29:return 24
break;
case 30:return 82
break;
case 31:return '!'
break;
case 32:return 61
break;
case 33:return 94
break;
case 34:return 62
break;
case 35:return '>>'
break;
case 36:return 58
break;
case 37:return 60
break;
case 38:return 57
break;
case 39:return 59
break;
case 40:return 63
break;
case 41:return 47
break;
case 42:return 53
break;
case 43:return 66
break;
case 44:return 54
break;
case 45:return 67
break;
case 46:return 83
break;
case 47:return 52
break;
case 48:return 56
break;
case 49:return 65
break;
case 50:return 55
break;
case 51:return 51
break;
case 52:return 64
break;
case 53:return '^'
break;
case 54:return 81
break;
case 55:return 17
break;
case 56:return 18
break;
case 57:return 85
break;
case 58:return 87
break;
case 59:return 28
break;
case 60:return 30
break;
case 61:return 16
break;
case 62:return 5
break;
case 63:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:cout\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:operator\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:const\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cpp_parser;
exports.Parser = cpp_parser.Parser;
exports.parse = function () { return cpp_parser.parse.apply(cpp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}