/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,9],$V2=[1,12],$V3=[1,23],$V4=[1,6],$V5=[1,7],$V6=[1,11],$V7=[1,8],$V8=[1,10],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,21],$Ve=[1,22],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[5,11,34,38,44,93],$Vl=[5,8,9,11,13,15,34,38,41,43,44,45,46,49,53,54,55,56,75,77,81,82,83,84,85,93],$Vm=[1,38],$Vn=[1,36],$Vo=[1,34],$Vp=[1,40],$Vq=[2,97],$Vr=[1,50],$Vs=[5,8,9,11,13,15,34,38,40,41,43,44,45,46,49,53,54,55,56,75,77,81,82,83,84,85,93],$Vt=[2,91],$Vu=[1,71],$Vv=[5,8,9,11,13,15,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,57,66,67,68,69,70,71,75,76,77,78,81,82,83,84,85,86,93],$Vw=[1,81],$Vx=[1,83],$Vy=[1,82],$Vz=[1,84],$VA=[1,80],$VB=[1,79],$VC=[1,85],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,78],$VI=[1,86],$VJ=[1,91],$VK=[5,8,9,11,13,15,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,70,71,75,76,77,78,81,82,83,84,85,86,93],$VL=[2,82],$VM=[5,8,9,11,13,15,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,70,71,75,76,77,78,81,82,83,84,85,86,93],$VN=[5,8,9,11,13,15,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,68,69,70,71,75,76,77,78,81,82,83,84,85,86,93],$VO=[1,100],$VP=[1,105],$VQ=[2,120],$VR=[1,120],$VS=[1,129],$VT=[17,76],$VU=[78,86],$VV=[11,38],$VW=[5,8,9,11,13,15,34,38,40,41,43,44,45,46,49,53,54,55,56,57,75,77,81,82,83,84,85,93],$VX=[1,170],$VY=[1,169],$VZ=[1,173],$V_=[2,107],$V$=[5,8,9,11,13,15,17,21,22,23,24,25,26,27,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,70,75,76,77,78,81,82,83,84,85,86,93],$V01=[5,8,9,11,13,15,17,21,22,23,24,25,26,27,28,29,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,70,75,76,77,78,81,82,83,84,85,86,93],$V11=[5,8,9,11,13,15,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,70,75,76,77,78,81,82,83,84,85,86,93],$V21=[17,86],$V31=[11,13];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_":7,"class":8,"IDENTIFIER":9,"class_statements":10,"end":11,"class_statement":12,"def":13,"OPERATOR":14,"(":15,"parameters":16,")":17,"statements":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"case_statement":33,"when":34,"e":35,"case_statements_":36,"case_statements":37,"else":38,"statement_with_semicolon":39,";":40,"while":41,"do":42,"loop":43,"break":44,"if":45,"case":46,"each":47,"|":48,"unless":49,"then":50,"elif":51,"function_call":52,"yield":53,"return":54,"raise":55,"local":56,"=":57,"identifiers":58,"access_array":59,"+=":60,"/=":61,"*=":62,"-=":63,"parentheses_expr":64,"dot_expr":65,"?":66,":":67,"...":68,"..":69,"!=":70,"**":71,"not_expr":72,"!":73,"exprs":74,"[":75,"]":76,"{":77,"}":78,"key_values":79,"parentheses_expr_":80,"NUMBER":81,"$":82,"@@":83,"@":84,"STRING_LITERAL":85,",":86,"key_value":87,"=>":88,"type":89,"parameter":90,"parentheses_exprs":91,"types":92,"elsif":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"IDENTIFIER",11:"end",13:"def",15:"(",17:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:"when",38:"else",40:";",41:"while",42:"do",43:"loop",44:"break",45:"if",46:"case",47:"each",48:"|",49:"unless",50:"then",53:"yield",54:"return",55:"raise",56:"local",57:"=",60:"+=",61:"/=",62:"*=",63:"-=",66:"?",67:":",68:"...",69:"..",70:"!=",71:"**",73:"!",75:"[",76:"]",77:"{",78:"}",81:"NUMBER",82:"$",83:"@@",84:"@",85:"STRING_LITERAL",86:",",88:"=>",93:"elsif"},
productions_: [0,[3,2],[4,2],[4,1],[7,4],[12,7],[12,9],[12,7],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[32,2],[32,1],[10,1],[18,1],[33,3],[36,2],[36,1],[37,3],[37,1],[6,2],[6,1],[6,1],[6,5],[6,7],[6,4],[6,4],[6,9],[6,4],[6,6],[6,5],[6,5],[6,4],[6,7],[39,1],[39,2],[39,2],[39,2],[39,4],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[35,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[72,2],[72,1],[52,3],[52,4],[65,3],[65,1],[59,4],[64,2],[64,3],[64,2],[64,3],[64,3],[64,4],[64,3],[64,1],[64,1],[80,1],[80,2],[80,2],[80,2],[80,1],[80,1],[79,3],[79,1],[87,3],[89,1],[90,1],[90,3],[16,3],[16,1],[16,0],[74,3],[74,1],[91,3],[91,1],[92,3],[92,1],[51,5],[51,4],[51,4],[51,3],[51,2],[58,3],[58,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 19: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 25: case 82: case 106:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 26:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 28:
this.$ = ["semicolon",$$[$0-1]];
break;
case 29:
this.$ = ["semicolon",$$[$0]];
break;
case 31:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["do_while",$$[$0-4],$$[$0-1]];
break;
case 33:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["switch",$$[$0-2],$$[$0-1]];
break;
case 35:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 36:
this.$ = ["unless",$$[$0-2],$$[$0-1]];
break;
case 37:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 38:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 39:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 40:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 41:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 43:
this.$ = ["yield",$$[$0]];
break;
case 44:
this.$ = ["return",$$[$0]];
break;
case 45:
this.$ = ["throw",$$[$0]];
break;
case 46:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 48: case 49:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 52: case 53:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 54: case 55:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 56:
this.$ = ["parallel_assignment",$$[$0-2],$$[$0]];
break;
case 57:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 58:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 59:
this.$ = ["unpack_array",$$[$0]]
break;
case 60:
this.$ = ["exclusive_range",$$[$0-2],$$[$0]]
break;
case 61:
this.$ = ["inclusive_range",$$[$0-2],$$[$0]]
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 75:
this.$ = ["-",$$[$0]];
break;
case 77:
this.$ = ["!", [".",$$[$0]]];
break;
case 78:
this.$ = [".", $$[$0]];
break;
case 79: case 88:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 80: case 89:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 81: case 99:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 83:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 84:
this.$ = ["initializer_list","Object",[]];
break;
case 85:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 86:
this.$ = ["associative_array","Object",[]];
break;
case 87:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 90:
this.$ = ["parentheses",$$[$0-1]];
break;
case 93: case 97: case 98:
this.$ = yytext;
break;
case 94:
this.$ = ["global_variable",$$[$0]]
break;
case 95:
this.$ = ["clas_variable",$$[$0]]
break;
case 96:
this.$ = ["instance_variable",$$[$0]]
break;
case 100: case 109: case 111: case 113: case 120:
this.$ = [$$[$0]];
break;
case 101:
this.$ = [$$[$0-2],$$[$0]]
break;
case 103:
this.$ = ["Object", $$[$0]];
break;
case 104:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 105: case 108: case 110: case 112: case 119:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 107:
this.$ = [];
break;
case 114:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 115:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 117:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 118:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{1:[3]},{5:[1,30]},o($Vk,[2,3],{6:3,39:4,7:5,52:13,59:18,64:19,80:24,4:31,8:$V0,9:$V1,13:$V2,15:$V3,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,75:$Vd,77:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj}),o($Vl,[2,29],{40:[1,32]}),o($Vl,[2,30]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:33,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{42:[1,42]},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:43,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{15:[1,49],20:[1,44],57:$Vq,60:[1,45],61:[1,46],62:[1,47],63:[1,48],75:$Vr},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:51,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:52,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:[1,53]},o($Vs,[2,42]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:54,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:55,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:56,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:[1,57],58:58},{57:$Vt,60:[1,59],61:[1,60],62:[1,61],63:[1,62]},{57:[1,63]},{9:[1,64]},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:67,59:39,64:35,65:41,72:37,73:$Vp,74:66,75:$Vd,76:[1,65],77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{78:[1,68],79:69,85:$Vu,87:70},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:72,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($Vv,[2,92]),o($Vv,[2,93]),{9:[1,73]},{9:[1,74]},{9:[1,75]},o($Vv,[2,98]),{1:[2,1]},o($Vk,[2,2]),o($Vl,[2,28]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:77,21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,39:4,41:$V4,42:[1,76],43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,66:$VH,70:$VI,71:$VJ,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,59:39,64:93,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VK,$VL,{68:[1,94],69:[1,95]}),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:96,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VM,[2,76]),o([5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,68,69,70,71,76,77,78,81,82,83,84,85,86,93],$Vq,{15:[1,97],75:$Vr}),o($VN,$Vt),{9:$Vm,15:$V3,59:39,64:99,65:98,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VM,[2,78],{20:$VO}),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:101,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,33:104,34:$VP,36:103,37:102,66:$VH,70:$VI,71:$VJ},{9:$Vm,15:$V3,47:[1,106],59:39,64:99,65:107,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:108,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:109,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:110,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:111,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,17:[1,112],29:$Vn,30:$Vo,35:67,59:39,64:35,65:41,72:37,73:$Vp,74:113,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:114,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:115,21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,66:$VH,70:$VI,71:$VJ,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:117,21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,50:[1,116],52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,66:$VH,70:$VI,71:$VJ,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{15:[1,118]},o($Vs,[2,43],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,44],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,45],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,$VQ,{57:[1,119],86:$VR}),o($Vs,[2,47]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:121,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:122,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:123,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:124,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:125,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{10:126,12:128,13:$VS,32:127},o($Vv,[2,84]),{76:[1,130]},o($VT,[2,109],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ,86:[1,131]}),o($Vv,[2,86]),{78:[1,132],86:[1,133]},o($VU,[2,100]),{88:[1,134]},{17:[1,135],21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ},o($Vv,[2,94]),o($Vv,[2,95]),o($Vv,[2,96]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:136,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[1,137]},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:138,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:139,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:140,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:141,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:142,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:143,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:144,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:145,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:146,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:147,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:148,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:149,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:150,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:151,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o([11,34,38,44,93],[2,22]),o($VM,[2,59]),{9:$Vm,15:$V3,59:39,64:152,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$Vm,15:$V3,59:39,64:153,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VM,[2,75]),{9:$Vm,15:$V3,17:[1,154],29:$Vn,30:$Vo,35:67,59:39,64:35,65:41,72:37,73:$Vp,74:155,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VM,[2,77],{20:$VO}),o($VK,$VL),{9:$Vm,15:$V3,59:39,64:156,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{44:[1,157]},{11:[1,158]},{11:[2,27],38:[1,159]},o($VV,[2,25],{33:104,36:160,34:$VP}),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:161,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{42:[1,162]},o($Vs,[2,57],{20:$VO}),o($Vs,[2,49],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,51],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,53],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,55],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($VW,[2,79]),{17:[1,163]},{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ,76:[1,164]},{11:[1,165]},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:166,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[1,168],38:$VX,51:167,93:$VY},{9:$VZ,16:171,17:$V_,90:172},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:174,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:[1,176],58:175},o($Vs,[2,48],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,50],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,52],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,54],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,56],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),{11:[1,177]},{11:[2,21]},{11:[2,20],12:128,13:$VS,32:178},{9:[1,181],14:179,19:[1,180],21:[1,182],22:[1,183],23:[1,184],24:[1,185],25:[1,186],26:[1,187],27:[1,188],28:[1,189],29:[1,190],30:[1,191],31:[1,192]},o($Vv,[2,85]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:67,59:39,64:35,65:41,72:37,73:$Vp,74:193,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($Vv,[2,87]),{85:$Vu,87:194},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:195,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($Vv,[2,90]),{11:[1,196]},o($Vl,[2,33]),{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,67:[1,197],70:$VI,71:$VJ},o([5,8,9,11,13,15,17,26,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,75,76,77,78,81,82,83,84,85,86,93],[2,62],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,70:$VI,71:$VJ}),o([5,8,9,11,13,15,17,25,26,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,66,67,75,76,77,78,81,82,83,84,85,86,93],[2,63],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,70:$VI,71:$VJ}),o($V$,[2,64],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V$,[2,65],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V$,[2,66],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V$,[2,67],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V$,[2,68],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V$,[2,69],{28:$VD,29:$VE,30:$VF,31:$VG,71:$VJ}),o($V01,[2,70],{30:$VF,31:$VG,71:$VJ}),o($V01,[2,71],{30:$VF,31:$VG,71:$VJ}),o($V11,[2,72],{71:$VJ}),o($V11,[2,73],{71:$VJ}),o($VM,[2,74]),o($VM,[2,60]),o($VM,[2,61]),o($VN,[2,88]),{17:[1,198]},o($VK,[2,81]),{45:[1,199]},o($Vl,[2,34]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:200,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VV,[2,24]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:201,21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,66:$VH,70:$VI,71:$VJ,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{48:[1,202]},o($VW,[2,80]),o([5,8,9,11,13,15,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,57,60,61,62,63,66,67,68,69,70,71,75,76,77,78,81,82,83,84,85,86,93],[2,83]),o($Vl,[2,36]),{11:[1,204],38:$VX,51:203,93:$VY},{11:[1,205]},o($Vl,[2,40]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:206,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:207,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{17:[1,208]},{17:[2,106],86:[1,209]},o($V21,[2,103],{67:[1,210]}),o($Vs,[2,46],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vs,[2,119]),o($Vs,$VQ,{86:$VR}),o($Vl,[2,4]),{11:[2,19]},{15:[1,211]},{20:[1,212]},{15:[1,213]},{15:[2,8]},{15:[2,9]},{15:[2,10]},{15:[2,11]},{15:[2,12]},{15:[2,13]},{15:[2,14]},{15:[2,15]},{15:[2,16]},{15:[2,17]},{15:[2,18]},o($VT,[2,108]),o($VU,[2,99]),o($VU,[2,101],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),o($Vl,[2,31]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:214,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($VN,[2,89]),{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:215,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[2,26]},o([11,34,38],[2,23]),{9:[1,216]},{11:[1,217]},o($Vl,[2,38]),o($Vl,[2,39]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:219,21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,50:[1,218],52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,66:$VH,70:$VI,71:$VJ,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[2,118]},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:220,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$VZ,16:221,17:$V_,90:172},{9:$Vm,15:$V3,29:$Vn,30:$Vo,35:222,59:39,64:35,65:41,72:37,73:$Vp,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$VZ,16:223,17:$V_,90:172},{9:[1,224]},{9:$VZ,16:225,17:$V_,90:172},o([5,8,9,11,13,15,17,34,38,40,41,42,43,44,45,46,49,50,53,54,55,56,67,75,76,77,78,81,82,83,84,85,86,93],[2,58],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),{11:[1,226],21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ},{48:[1,227]},o($Vl,[2,37]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:228,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[2,117],38:$VX,51:229,93:$VY},{11:[1,230]},{17:[2,105]},o($V21,[2,104],{21:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,27:$VC,28:$VD,29:$VE,30:$VF,31:$VG,66:$VH,70:$VI,71:$VJ}),{17:[1,231]},{15:[1,232]},{17:[1,233]},o($Vl,[2,32]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:234,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[2,115],38:$VX,51:235,93:$VY},{11:[2,116]},o($Vl,[2,41]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:236,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{9:$VZ,16:237,17:$V_,90:172},{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:238,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},{11:[1,239]},{11:[2,114]},{11:[1,240]},{17:[1,241]},{11:[1,242]},o($Vl,[2,35]),o($V31,[2,5]),{4:92,6:3,7:5,8:$V0,9:$V1,13:$V2,15:$V3,18:243,39:4,41:$V4,43:$V5,45:$V6,46:$V7,49:$V8,52:13,53:$V9,54:$Va,55:$Vb,56:$Vc,59:18,64:19,75:$Vd,77:$Ve,80:24,81:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj},o($V31,[2,7]),{11:[1,244]},o($V31,[2,6])],
defaultActions: {30:[2,1],127:[2,21],178:[2,19],182:[2,8],183:[2,9],184:[2,10],185:[2,11],186:[2,12],187:[2,13],188:[2,14],189:[2,15],190:[2,16],191:[2,17],192:[2,18],200:[2,26],207:[2,118],221:[2,105],229:[2,116],235:[2,114]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return 49
break;
case 3:return "def"
break;
case 4:return "self"
break;
case 5:return "end"
break;
case 6:return "each"
break;
case 7:return 43
break;
case 8:return 55
break;
case 9:return 44
break;
case 10:return 93
break;
case 11:return 45
break;
case 12:return 38
break;
case 13:return 34
break;
case 14:return 46
break;
case 15:return 8
break;
case 16:return 54
break;
case 17:return 53
break;
case 18:return 41
break;
case 19:return "then"
break;
case 20:return 'for'
break;
case 21:return 42
break;
case 22:return 86
break;
case 23:return 68
break;
case 24:return 69
break;
case 25:return 20
break;
case 26:return 67
break;
case 27:return 40
break;
case 28:return 25
break;
case 29:return 26
break;
case 30:return "|"
break;
case 31:return 70
break;
case 32:return 73
break;
case 33:return 88
break;
case 34:return 22
break;
case 35:return 24
break;
case 36:return 21
break;
case 37:return 23
break;
case 38:return 27
break;
case 39:return 57
break;
case 40:return 62
break;
case 41:return 71
break;
case 42:return 30
break;
case 43:return 31
break;
case 44:return 63
break;
case 45:return 29
break;
case 46:return 60
break;
case 47:return 28
break;
case 48:return '^'
break;
case 49:return 66
break;
case 50:return 77
break;
case 51:return 78
break;
case 52:return 75
break;
case 53:return 76
break;
case 54:return 15
break;
case 55:return 17
break;
case 56:return 9
break;
case 57:return 81
break;
case 58:return 85
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:unless\b)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:loop\b)/,/^(?:raise\b)/,/^(?:break\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:when\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}