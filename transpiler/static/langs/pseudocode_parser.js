/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pseudocode_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,25],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,20],$V7=[1,10],$V8=[1,12],$V9=[1,14],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,16],$Vf=[1,17],$Vg=[1,31],$Vh=[1,32],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[5,17,22,45,104,105],$Vm=[5,9,10,14,16,17,22,23,25,28,32,37,40,45,49,50,51,52,53,65,97,98,99,100,101,104,105],$Vn=[1,43],$Vo=[1,47],$Vp=[1,37],$Vq=[1,39],$Vr=[1,42],$Vs=[1,49],$Vt=[2,5],$Vu=[2,95],$Vv=[5,9,10,13,14,16,17,20,22,23,25,28,32,37,40,45,49,50,51,52,53,65,97,98,99,100,101,104,105],$Vw=[1,79],$Vx=[1,78],$Vy=[5,9,10,13,14,16,17,19,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,97,98,99,100,101,104,105],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,97,98,99,100,101,104,105],$VP=[5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,97,98,99,100,101,104,105],$VQ=[1,114],$VR=[1,129],$VS=[1,127],$VT=[1,126],$VU=[2,118],$VV=[1,131],$VW=[2,109],$VX=[1,163],$VY=[5,9,10,14,16,17,22,23,24,25,28,32,37,40,45,49,50,51,52,53,65,97,98,99,100,101,104,105],$VZ=[17,22],$V_=[1,193],$V$=[5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,76,77,78,79,80,81,82,95,97,98,99,100,101,104,105],$V01=[5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,76,77,78,79,80,81,82,83,84,85,95,97,98,99,100,101,104,105],$V11=[5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88,95,97,98,99,100,101,104,105],$V21=[1,206],$V31=[1,207],$V41=[1,243],$V51=[22,47],$V61=[9,10,17,22,28,39];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"access_modifier":8,"public":9,"private":10,"class_":11,"statement_with_semicolon":12,";":13,"while":14,"e":15,"do":16,"end":17,"bracket_statements":18,"(":19,")":20,"{":21,"}":22,"repeat":23,"until":24,"for":25,"_":26,",":27,"IDENTIFIER":28,"in":29,"pairs":30,"dot_expr":31,"if":32,"then":33,"elif":34,"function_or_def":35,"parameters":36,"foreach":37,"type":38,"static":39,"switch":40,"case_statements":41,"case_statement":42,"case":43,":":44,"break":45,"case_statements_":46,"default":47,"local_or_var":48,"let":49,"local":50,"my":51,"var":52,"class":53,"class_statements":54,"namespace":55,"abstract":56,"interface":57,"enum":58,"identifiers":59,"extends":60,"implements":61,"class_statements_":62,"class_statement":63,"=":64,"return":65,"access_array":66,"++":67,"--":68,"+=":69,"-=":70,"*=":71,"/=":72,".":73,"function_call":74,"or":75,"and":76,"<=":77,"<":78,">=":79,"==":80,"~=":81,">":82,"+":83,"-":84,"..":85,"*":86,"/":87,"%":88,"^":89,"not_expr":90,"!":91,"parentheses_expr":92,"parentheses_expr_":93,"[":94,"]":95,"exprs":96,"NUMBER":97,"STRING_LITERAL":98,"function":99,"func":100,"def":101,"parameter":102,"types":103,"elseif":104,"else":105,"key_values":106,"key_value":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public",10:"private",13:";",14:"while",16:"do",17:"end",19:"(",20:")",21:"{",22:"}",23:"repeat",24:"until",25:"for",26:"_",27:",",28:"IDENTIFIER",29:"in",30:"pairs",32:"if",33:"then",37:"foreach",39:"static",40:"switch",43:"case",44:":",45:"break",47:"default",49:"let",50:"local",51:"my",52:"var",53:"class",55:"namespace",56:"abstract",57:"interface",58:"enum",60:"extends",61:"implements",64:"=",65:"return",67:"++",68:"--",69:"+=",70:"-=",71:"*=",72:"/=",73:".",75:"or",76:"and",77:"<=",78:"<",79:">=",80:"==",81:"~=",82:">",83:"+",84:"-",85:"..",86:"*",87:"/",88:"%",89:"^",91:"!",94:"[",95:"]",97:"NUMBER",98:"STRING_LITERAL",99:"function",100:"func",101:"def",104:"elseif",105:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,1],[8,1],[6,1],[6,2],[6,1],[6,5],[6,7],[6,5],[6,4],[6,12],[6,12],[6,6],[6,5],[6,7],[6,8],[6,9],[6,8],[6,10],[6,7],[18,3],[18,2],[42,6],[46,2],[46,1],[41,4],[41,1],[38,1],[48,1],[48,1],[48,1],[48,1],[11,6],[11,6],[11,7],[11,6],[11,6],[11,8],[11,8],[11,5],[11,4],[54,1],[62,2],[62,1],[63,8],[63,7],[63,6],[63,4],[63,7],[63,8],[63,7],[63,10],[63,9],[12,2],[12,4],[12,2],[12,3],[12,3],[12,2],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,1],[90,2],[90,1],[31,3],[31,1],[66,4],[74,3],[74,4],[93,1],[93,1],[93,1],[35,1],[35,1],[35,1],[92,6],[92,7],[92,3],[92,1],[92,1],[92,1],[102,1],[36,3],[36,1],[36,0],[96,3],[96,1],[103,3],[103,1],[34,5],[34,4],[34,2],[59,3],[59,1],[106,3],[106,1],[107,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 27: case 46:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 28: case 47: case 90: case 108:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 8: case 25:
this.$ = ["semicolon",$$[$0-1]];
break;
case 9:
this.$ = ["semicolon",$$[$0]];
break;
case 10: case 12:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 13:
this.$ = ["do_while",$$[$0],$$[$0-2]];
break;
case 14:
this.$ = ["foreach","Object",$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 15:
this.$ = ["foreach_with_index","Object",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 16:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 17:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 18:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 19:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 24:
this.$= $$[$0-1];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 36: case 43:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 37: case 39:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 40:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 41:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 42:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 44:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 45:
this.$ = ["class_statements",$$[$0]]
break;
case 48:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 49:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 50:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 51:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 52:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 53:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 54:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 55:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 56:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 57:
this.$ = ["return",$$[$0]];
break;
case 58:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 60: case 61:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 62: case 63:
this.$ = [$$[$0],$$[$0-1]];
break;
case 64: case 65: case 66: case 67: case 72: case 73: case 74: case 75: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 68:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 70:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 71:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 76:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 85:
this.$ = ["-",$$[$0]];
break;
case 87:
this.$ = ["!", [".",$$[$0]]];
break;
case 88:
this.$ = [".", $$[$0]];
break;
case 89: case 107: case 110: case 112: case 117:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 91:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 92:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 93:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 94: case 95: case 96:
this.$ = yytext;
break;
case 100:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 101:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]];
break;
case 102:
this.$ = ["parentheses",$$[$0-1]];
break;
case 106:
this.$ = ["Object", $$[$0]];
break;
case 109:
this.$ = [];
break;
case 111: case 113: case 118: case 120:
this.$ = [$$[$0]];
break;
case 114:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 115:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["else",$$[$0]];
break;
case 119:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 121:
this.$ = [$$[$0-2],$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{1:[3]},{5:[1,33]},o($Vl,[2,3],{6:3,11:4,12:5,35:11,8:15,48:18,66:19,74:21,93:30,4:34,9:$V0,10:$V1,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,37:$V8,40:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk}),o($Vm,[2,7]),o($Vm,[2,9],{13:[1,35]}),{15:36,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{12:50,18:48,21:$Vs,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},{12:50,18:51,21:$Vs,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},{19:[1,54],26:[1,52],28:[1,53]},{15:55,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{28:[1,56]},{19:[1,57]},o([53,55,56,57,58],$Vt,{39:[1,58]}),{19:[1,59]},{53:[1,60],55:[1,61],56:[1,62],57:[1,63],58:[1,64]},{28:[1,65]},{15:66,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{28:[1,67],59:68},{64:[1,69]},o([19,94],$Vu,{64:[1,70],67:[1,71],68:[1,72],69:[1,73],70:[1,74],71:[1,75],72:[1,76],73:[1,77]}),o($Vv,[2,69]),{28:[2,97]},{28:[2,98]},{28:[2,99]},o([28,39,53,55,56,57,58],[2,6]),{28:[2,32]},{28:[2,33]},{28:[2,34]},{28:[2,35]},{19:$Vw,94:$Vx},o($Vy,[2,94]),o($Vy,[2,96]),{1:[2,1]},o($Vl,[2,2]),o($Vm,[2,8]),{16:[1,80],21:[1,81],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{15:97,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($VO,[2,86]),{19:$Vn,28:$Vo,31:98,66:44,74:45,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($VO,[2,88]),o($VO,[2,90],{73:[1,99]}),{19:[1,100]},{15:101,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105],{19:$Vw,94:$Vx}),o($Vy,$Vu),{14:[1,102]},{4:104,6:3,7:103,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{13:[1,105]},{24:[1,106]},{27:[1,107]},{27:[1,108]},{12:109,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},{21:[1,111],33:[1,110],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{19:[1,112]},{28:$VQ,38:113},{28:$VQ,38:115},{15:116,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{28:[1,117]},{28:[1,118]},{53:[1,119]},{28:[1,120]},{28:[1,121]},{8:128,9:$VR,10:$V1,21:[1,122],28:$VS,39:$VT,54:123,62:124,63:125},o($Vv,[2,57],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,$VU,{27:$VV,64:[1,130]}),o($Vv,[2,59]),{15:132,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:133,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($Vv,[2,62]),o($Vv,[2,63]),{15:134,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:135,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:136,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:137,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{19:$Vn,28:$Vo,31:138,66:44,74:45,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:139,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:142,19:$Vn,20:[1,140],28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,96:141,97:$Vg,98:$Vh,99:$Vr},{4:104,6:3,7:143,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{4:104,6:3,7:144,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{15:145,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:146,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:147,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:148,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:149,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:150,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:151,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:152,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:153,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:154,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:155,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:156,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:157,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:158,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{15:159,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($VO,[2,85]),o($VO,[2,87]),{19:$Vn,28:$Vo,31:160,66:44,74:45,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{20:$VW,28:$VX,36:161,102:162},{20:[1,164],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{19:[1,165]},{22:[1,166]},o([17,22,45,104,105],[2,4]),o($VY,[2,25]),{15:167,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{28:[1,168]},{28:[1,169]},{13:[1,170]},{4:104,6:3,7:171,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{4:104,6:3,7:172,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{20:$VW,28:$VX,36:173,102:162},{28:[1,174]},{28:[2,31]},{28:[1,175]},{20:[1,176],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{21:[1,177],60:[1,178],61:[1,179]},{21:[1,180]},{28:[1,181]},{21:[1,182]},{21:[1,183]},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:184,62:124,63:125},{17:[1,185]},o($VZ,[2,45]),o($VZ,[2,47],{63:125,8:128,62:186,9:$VR,10:$V1,28:$VS,39:$VT}),{28:[1,187]},{19:[1,188]},{28:$VQ,38:189,39:[1,190]},o([28,39],$Vt),{15:191,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{28:$V_,59:192},o($Vv,[2,60],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,61],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,64],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,65],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,66],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,67],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,68]),{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,95:[1,194]},o($VP,[2,92]),{20:[1,195]},{20:[2,111],27:[1,196],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{17:[1,197]},{22:[1,198]},o([5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,95,97,98,99,100,101,104,105],[2,70],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o([5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,65,75,76,95,97,98,99,100,101,104,105],[2,71],{77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,72],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,73],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,74],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,75],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,76],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V$,[2,77],{83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($V01,[2,78],{86:$VK,87:$VL,88:$VM,89:$VN}),o($V01,[2,79],{86:$VK,87:$VL,88:$VM,89:$VN}),o($V01,[2,80],{86:$VK,87:$VL,88:$VM,89:$VN}),o($V11,[2,81],{89:$VN}),o($V11,[2,82],{89:$VN}),o($V11,[2,83],{89:$VN}),o($VO,[2,84]),o($VO,[2,89]),{20:[1,199]},{20:[2,108],27:[1,200]},o([20,27],[2,106]),o($VP,[2,102]),{15:201,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($VY,[2,24]),o($Vm,[2,13],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),{29:[1,202]},{29:[1,203]},{15:204,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{34:205,104:$V21,105:$V31},{22:[1,208]},{20:[1,209]},{29:[1,210]},{19:[1,211]},{21:[1,212]},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:213,62:124,63:125},{28:[1,214]},{28:[1,215]},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:216,62:124,63:125},{21:[1,217]},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:218,62:124,63:125},{28:$V_,59:219},{22:[1,220]},o($Vm,[2,44]),o($VZ,[2,46]),{19:[1,221]},{20:$VW,28:$VX,36:222,102:162},{28:[1,223]},{28:$VQ,38:224},o($Vv,[2,58],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),o($Vv,[2,117]),o($Vv,$VU,{27:$VV}),o([5,9,10,13,14,16,17,20,21,22,23,25,27,28,32,33,37,40,44,45,49,50,51,52,53,64,65,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,97,98,99,100,101,104,105],[2,91]),o($VP,[2,93]),{15:142,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,96:225,97:$Vg,98:$Vh,99:$Vr},o($Vm,[2,10]),o($Vm,[2,12]),{4:104,6:3,7:226,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,21:[1,227],23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{20:$VW,28:$VX,36:228,102:162},{20:[1,229],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{30:[1,230]},{30:[1,231]},{13:[1,232],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{17:[1,233]},{15:234,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{4:104,6:3,7:235,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vm,[2,17]),{4:104,6:3,7:236,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,21:[1,237],23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{28:[1,238]},{20:$VW,28:$VX,36:239,102:162},{41:240,42:242,43:$V41,46:241},{22:[1,244]},{21:[1,245]},{21:[1,246]},{22:[1,247]},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:248,62:124,63:125},{22:[1,249]},{22:[1,250]},o($Vm,[2,43]),{20:$VW,28:$VX,36:251,102:162},{20:[1,252]},{13:[1,254],19:[1,255],64:[1,253]},{28:[1,256]},{20:[2,110]},{17:[1,257]},{4:104,6:3,7:258,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{20:[2,107]},{13:[1,259]},{19:[1,260]},{19:[1,261]},{12:262,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},o($Vm,[2,16]),{33:[1,263],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{17:[2,116]},{17:[1,264]},{4:104,6:3,7:265,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{20:[1,266]},{20:[1,267]},{22:[1,268]},{22:[2,30],47:[1,269]},o($V51,[2,28],{42:242,46:270,43:$V41}),{15:271,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($Vm,[2,36]),{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:272,62:124,63:125},{8:128,9:$VR,10:$V1,28:$VS,39:$VT,54:273,62:124,63:125},o($Vm,[2,37]),{22:[1,274]},o($Vm,[2,39]),o($Vm,[2,40]),{20:[1,275]},{21:[1,276]},{15:277,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},o($V61,[2,51]),{20:$VW,28:$VX,36:278,102:162},{19:[1,280],64:[1,279]},o($VP,[2,100]),{22:[1,281]},o($Vm,[2,11]),{19:$Vn,28:$Vo,31:282,66:44,74:45,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{19:$Vn,28:$Vo,31:283,66:44,74:45,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{20:[1,284]},{4:104,6:3,7:285,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vm,[2,18]),{22:[1,286]},{12:50,18:287,21:$Vs,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},{21:[1,288]},o($Vm,[2,23]),{44:[1,289]},o($V51,[2,27]),{44:[1,290],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{22:[1,291]},{22:[1,292]},o($Vm,[2,38]),{21:[1,293]},{4:104,6:3,7:294,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{13:[1,295],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{20:[1,296]},{15:297,19:$Vn,28:$Vo,31:40,66:44,74:45,84:$Vp,90:38,91:$Vq,92:41,93:46,97:$Vg,98:$Vh,99:$Vr},{20:$VW,28:$VX,36:298,102:162},o($VP,[2,101]),{20:[1,299]},{20:[1,300]},{12:50,18:301,21:$Vs,28:$V6,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh},{17:[2,115],34:302,104:$V21,105:$V31},o($Vm,[2,19]),o($Vm,[2,21]),{4:104,6:3,7:303,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{4:104,6:3,7:304,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{4:104,6:3,7:305,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vm,[2,41]),o($Vm,[2,42]),{4:104,6:3,7:306,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{22:[1,307]},o($V61,[2,50]),{13:[1,308],21:[1,309]},{13:[1,310],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN},{20:[1,311]},{16:[1,312]},{16:[1,313]},o($Vm,[2,20]),{17:[2,114]},{22:[1,314]},{22:[2,29]},{45:[1,315]},{22:[1,316]},o($V61,[2,49]),o($V61,[2,54]),{4:104,6:3,7:317,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V61,[2,52]),{13:[1,318],21:[1,319]},{4:104,6:3,7:320,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{4:104,6:3,7:321,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vm,[2,22]),{13:[1,322]},o($V61,[2,48]),{22:[1,323]},o($V61,[2,53]),{4:104,6:3,7:324,8:15,9:$V0,10:$V1,11:4,12:5,14:$V2,16:$V3,23:$V4,25:$V5,28:$V6,32:$V7,35:11,37:$V8,40:$V9,48:18,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:19,74:21,93:30,97:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{17:[1,325]},{17:[1,326]},o([22,43,47],[2,26]),o($V61,[2,56]),{22:[1,327]},o($Vm,[2,14]),o($Vm,[2,15]),o($V61,[2,55])],
defaultActions: {22:[2,97],23:[2,98],24:[2,99],26:[2,32],27:[2,33],28:[2,34],29:[2,35],33:[2,1],114:[2,31],225:[2,110],228:[2,107],235:[2,116],302:[2,114],304:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 97
break;
case 2:return 98
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return 9
break;
case 6:return 39
break;
case 7:return 53
break;
case 8:return "func"
break;
case 9:return "def"
break;
case 10:return "end"
break;
case 11:return "then"
break;
case 12:return 104
break;
case 13:return 37
break;
case 14:return 57
break;
case 15:return 32
break;
case 16:return 105
break;
case 17:return 65
break;
case 18:return 14
break;
case 19:return 49
break;
case 20:return 25
break;
case 21:return 52
break;
case 22:return 51
break;
case 23:return 50
break;
case 24:return 23
break;
case 25:return 24
break;
case 26:return 'of'
break;
case 27:return 'not'
break;
case 28:return 27
break;
case 29:return 85
break;
case 30:return 73
break;
case 31:return 44
break;
case 32:return 13
break;
case 33:return 76
break;
case 34:return 75
break;
case 35:return 79
break;
case 36:return 82
break;
case 37:return 77
break;
case 38:return 78
break;
case 39:return 81
break;
case 40:return 80
break;
case 41:return 64
break;
case 42:return 71
break;
case 43:return 86
break;
case 44:return 72
break;
case 45:return 87
break;
case 46:return 88
break;
case 47:return 70
break;
case 48:return 68
break;
case 49:return 84
break;
case 50:return 69
break;
case 51:return 67
break;
case 52:return 83
break;
case 53:return 89
break;
case 54:return 21
break;
case 55:return 22
break;
case 56:return 94
break;
case 57:return 95
break;
case 58:return 19
break;
case 59:return 20
break;
case 60:return 26
break;
case 61:return 30
break;
case 62:return 29
break;
case 63:return 16
break;
case 64:return 28
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:class\b)/,/^(?:func\b)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:foreach\b)/,/^(?:interface\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:let\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:my\b)/,/^(?:local\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pseudocode_parser;
exports.Parser = pseudocode_parser.Parser;
exports.parse = function () { return pseudocode_parser.parse.apply(pseudocode_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}