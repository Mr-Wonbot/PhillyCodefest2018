/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,23],$V2=[1,20],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,21],$Vd=[5,18,43],$Ve=[5,12,13,16,18,23,28,29,31,32,36,38,43,48,49,92],$Vf=[1,29],$Vg=[1,51],$Vh=[1,47],$Vi=[1,43],$Vj=[1,46],$Vk=[1,38],$Vl=[1,39],$Vm=[1,42],$Vn=[1,48],$Vo=[1,50],$Vp=[22,26],$Vq=[1,66],$Vr=[1,64],$Vs=[1,65],$Vt=[2,78],$Vu=[15,46],$Vv=[1,90],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,91],$VI=[1,92],$VJ=[22,26,42,52,61,63,66,67,68,69,70,71,72,73,74,75,76,77,87,88],$VK=[22,26,42,52,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,87,88],$VL=[1,118],$VM=[5,12,13,16,18,23,28,29,31,32,36,38,43,48,49,90,91,92],$VN=[2,84],$VO=[1,131],$VP=[26,52],$VQ=[16,73,87,92],$VR=[26,87],$VS=[22,26,42,52,63,66,67,68,69,70,71,72,73,87,88],$VT=[22,26,42,52,61,63,66,67,68,69,70,71,72,73,74,75,87,88],$VU=[1,190],$VV=[1,196],$VW=[1,197],$VX=[18,45];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"statement_with_semicolon":21,";":22,"while":23,"(":24,"e":25,")":26,"bracket_statements":27,"do":28,"switch":29,"case_statements":30,"for":31,"foreach":32,"var_name":33,"as":34,"=>":35,"if":36,"elif":37,"function":38,"parameters":39,"case_statement":40,"case":41,":":42,"break":43,"case_statements_":44,"default":45,"static":46,"type":47,"System.out.println":48,"return":49,"=":50,"[":51,"]":52,"access_array":53,"++":54,"--":55,"+=":56,"-=":57,"*=":58,"/=":59,"function_call":60,".":61,"dot_expr":62,"?":63,"...":64,"parentheses_expr":65,"||":66,"&&":67,"!==":68,"===":69,"<=":70,"<":71,">=":72,">":73,"+":74,"-":75,"*":76,"/":77,"->":78,"access_arr":79,"exprs":80,"new":81,"NUMBER":82,"STRING_LITERAL":83,"types":84,"parameter":85,"&":86,",":87,"][":88,"else_if":89,"else":90,"elseif":91,"$":92,"var_names":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",22:";",23:"while",24:"(",26:")",28:"do",29:"switch",31:"for",32:"foreach",34:"as",35:"=>",36:"if",38:"function",41:"case",42:":",43:"break",45:"default",46:"static",48:"System.out.println",49:"return",50:"=",51:"[",52:"]",54:"++",55:"--",56:"+=",57:"-=",58:"*=",59:"/=",61:".",63:"?",64:"...",66:"||",67:"&&",68:"!==",69:"===",70:"<=",71:"<",72:">=",73:">",74:"+",75:"-",76:"*",77:"/",78:"->",81:"new",82:"NUMBER",83:"STRING_LITERAL",86:"&",87:",",88:"][",90:"else",91:"elseif",92:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[40,6],[44,2],[44,1],[30,4],[30,1],[10,10],[21,4],[21,2],[21,4],[21,5],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[25,5],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[62,3],[62,1],[53,4],[60,3],[60,4],[65,5],[65,7],[65,1],[65,1],[65,2],[65,3],[65,3],[65,1],[65,1],[65,1],[47,3],[47,4],[47,1],[85,1],[85,2],[85,3],[39,3],[39,1],[39,0],[79,3],[79,1],[80,3],[80,1],[84,3],[84,1],[89,2],[89,1],[37,6],[37,5],[37,2],[33,2],[93,3],[93,1],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 25:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 26: case 62: case 83: case 86:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["class",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["class_extends",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_implements",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13: case 100:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 17:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 20:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 21:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 27:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 29:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 30:
this.$ = ["println",$$[$0-1]];
break;
case 31:
this.$ = ["return",$$[$0]];
break;
case 32:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 34: case 35:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 36: case 37:
this.$ = [$$[$0],$$[$0-1]];
break;
case 38: case 39: case 40: case 41: case 46: case 47: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 45:
this.$ = ["unpack_array",$$[$0]]
break;
case 48:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = [".", $$[$0]];
break;
case 61: case 82: case 85: case 87: case 89: case 97:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 63:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 64:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 65:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 66:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 67:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 70:
this.$ = ["initializer_list","Object",[]];
break;
case 71:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 72:
this.$ = $$[$0-1];
break;
case 73: case 74: case 75:
this.$ = yytext;
break;
case 76:
this.$ = [$$[$0-2],"[]"];
break;
case 77:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 79:
this.$ = ["Object", $$[$0]];
break;
case 80:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 81:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 84:
this.$ = [];
break;
case 88: case 90: case 98:
this.$ = [$$[$0]];
break;
case 93:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 94:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 95:
this.$ = ["else",$$[$0]];
break;
case 96:
this.$ = $$[$0];
break;
case 99:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{1:[3]},{5:[1,24]},o($Vd,[2,3],{6:3,21:4,14:5,47:15,33:16,53:17,60:18,11:19,4:25,12:$V0,13:$V1,16:$V2,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,36:$V8,38:$V9,48:$Va,49:$Vb,92:$Vc}),{22:[1,26]},o($Ve,[2,14]),{24:[1,27]},{16:$V2,17:$Vf,21:30,27:28,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{24:[1,31]},{24:[1,32]},{24:[1,33]},{24:[1,34]},{16:[1,35]},{24:[1,36]},{16:$Vg,24:$Vh,25:37,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{33:52,92:$Vc},{50:[1,54],51:[1,53],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],61:[1,61]},{50:[1,62]},o($Vp,[2,42]),{15:[1,63]},{24:$Vq,51:$Vr,71:$Vs,92:$Vt},{16:[1,67]},o($Vu,[2,8]),o($Vu,[2,9]),{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,13]),{16:$Vg,24:$Vh,25:68,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{23:[1,69]},{4:71,6:3,9:70,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{22:[1,72]},{16:$Vg,24:$Vh,25:73,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$V2,21:74,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{33:75,92:$Vc},{16:$Vg,24:$Vh,25:76,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{24:[1,77]},{16:$Vg,24:$Vh,25:78,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($Vp,[2,31],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),{16:$Vg,24:$Vh,33:49,38:$Vi,51:$Vj,53:44,60:45,65:93,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:94,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VJ,[2,60]),o($VJ,[2,62],{78:[1,95]}),{15:[1,96]},{24:[1,97]},o($VK,[2,68]),o($VK,[2,69]),{16:$Vg,24:$Vh,25:100,33:49,38:$Vi,51:$Vj,52:[1,98],53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,80:99,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:101,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VK,[2,73]),o($VK,[2,74],{51:[1,102]}),o($VK,[2,75]),{24:$Vq},{50:[1,103]},{16:$Vg,24:$Vh,25:106,33:49,38:$Vi,51:$Vj,52:[1,104],53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,79:105,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:107,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($Vp,[2,36]),o($Vp,[2,37]),{16:$Vg,24:$Vh,25:108,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:109,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:110,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:111,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,33:49,38:$Vi,51:$Vj,53:44,60:45,62:112,65:41,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:113,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:[1,114]},{52:[1,115]},{16:$VL,47:117,84:116},{16:$Vg,24:$Vh,25:100,26:[1,119],33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,80:120,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o([22,26,34,35,42,50,51,52,54,55,56,57,58,59,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,87,88],[2,96]),{26:[1,121],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{24:[1,122]},{18:[1,123]},o([18,43],[2,5]),o($VM,[2,100]),{26:[1,124],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{22:[1,125]},{34:[1,126]},{26:[1,127],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{26:$VN,33:130,39:128,85:129,86:$VO,92:$Vc},{26:[1,132],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{16:$Vg,24:$Vh,25:133,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:134,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:135,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:136,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:137,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:138,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:139,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:140,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:141,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:142,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:143,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:144,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:145,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:146,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VJ,[2,45]),o($VJ,[2,59]),{16:$Vg,24:$Vh,33:49,38:$Vi,51:$Vj,53:44,60:45,62:147,65:41,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{17:[1,148]},{26:$VN,33:130,39:149,85:129,86:$VO,92:$Vc},o($VK,[2,70]),{52:[1,150]},o($VP,[2,88],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,87:[1,151]}),{26:[1,152],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{16:$Vg,24:$Vh,25:106,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,79:105,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$Vg,24:$Vh,25:153,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{50:[1,154]},{52:[1,155]},{52:[2,86],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,88:[1,156]},o($Vp,[2,35],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($Vp,[2,38],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($Vp,[2,39],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($Vp,[2,40],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($Vp,[2,41],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($Vp,[2,43]),o($Vp,[2,34],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),{17:[1,157],19:[1,158],20:[1,159]},o($VQ,[2,76]),{73:[1,160]},{73:[2,90],87:[1,161]},o([16,73,87],$Vt,{51:$Vr,71:$Vs}),o($VK,[2,64]),{26:[1,162]},{16:$V2,17:$Vf,21:30,27:163,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{16:$Vg,24:$Vh,25:164,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VM,[2,99]),{17:[1,165]},{16:$Vg,24:$Vh,25:166,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{33:167,92:$Vc},{16:$V2,17:$Vf,21:30,27:168,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{26:[1,169]},{26:[2,83],87:[1,170]},o($VR,[2,79],{50:[1,171]}),{33:172,92:$Vc},o($Vp,[2,30]),{42:[1,173],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o([22,26,42,52,63,66,87,88],[2,46],{61:$Vv,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o([22,26,42,52,63,66,67,87,88],[2,47],{61:$Vv,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,48],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,49],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,50],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,51],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,52],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VS,[2,53],{61:$Vv,74:$VF,75:$VG,76:$VH,77:$VI}),o($VT,[2,54],{76:$VH,77:$VI}),o($VT,[2,55],{76:$VH,77:$VI}),o($VT,[2,56],{76:$VH,77:$VI}),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,61]),{4:71,6:3,9:174,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{26:[1,175]},o($VK,[2,71]),{16:$Vg,24:$Vh,25:100,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,80:176,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VK,[2,72]),o($Vp,[2,32],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),{16:$Vg,24:$Vh,25:177,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o([22,26,42,50,52,61,63,66,67,68,69,70,71,72,73,74,75,76,77,78,87,88],[2,63]),{16:$Vg,24:$Vh,25:106,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,79:178,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{7:179,8:180,10:181,11:182,12:$V0,13:$V1},{16:[1,183]},{16:[1,184]},o($VQ,[2,77]),{16:$VL,47:117,84:185},o($VK,[2,65]),o($Ve,[2,15]),{26:[1,186],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{30:187,40:189,41:$VU,44:188},{22:[1,191],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{26:[1,193],35:[1,192]},o($Ve,[2,22],{37:194,89:195,90:$VV,91:$VW}),{17:[1,198]},{26:$VN,33:130,39:199,85:129,86:$VO,92:$Vc},{16:$Vg,24:$Vh,25:200,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($VR,[2,80]),{16:$Vg,24:$Vh,25:201,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{18:[1,202]},{17:[1,203]},o($VP,[2,87]),o($Vp,[2,33],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),{52:[2,85]},{18:[1,204]},{18:[2,4]},{8:205,10:181,11:182,12:$V0,13:$V1,18:[2,7]},{46:[1,206]},{17:[1,207]},{17:[1,208]},{73:[2,89]},{22:[1,209]},{18:[1,210]},{18:[2,28],45:[1,211]},o($VX,[2,26],{40:189,44:212,41:$VU}),{16:$Vg,24:$Vh,25:213,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},{16:$V2,21:214,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{33:215,92:$Vc},{16:$V2,17:$Vf,21:30,27:216,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},o($Ve,[2,21]),{24:[1,217]},{16:$V2,17:$Vf,21:30,27:218,33:16,36:[1,219],47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{24:[2,92]},{4:71,6:3,9:220,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{26:[2,82]},o($VR,[2,81],{61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o([22,26,42,52,63,87,88],[2,44],{61:$Vv,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($VK,[2,66]),{4:71,6:3,9:221,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},o($Ve,[2,10]),{18:[2,6]},{16:$VL,47:222},{7:223,8:180,10:181,11:182,12:$V0,13:$V1},{7:224,8:180,10:181,11:182,12:$V0,13:$V1},o($Ve,[2,16]),o($Ve,[2,17]),{42:[1,225]},o($VX,[2,25]),{42:[1,226],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},{26:[1,227]},{26:[1,228]},o($Ve,[2,20]),{16:$Vg,24:$Vh,25:229,33:49,38:$Vi,51:$Vj,53:44,60:45,62:40,64:$Vk,65:41,75:$Vl,81:$Vm,82:$Vn,83:$Vo,92:$Vc},o($Ve,[2,95]),{24:[2,91]},{18:[1,230]},{18:[1,231]},{16:[1,232]},{18:[1,233]},{18:[1,234]},{4:71,6:3,9:235,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{4:71,6:3,9:236,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{16:$V2,17:$Vf,21:30,27:237,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{16:$V2,17:$Vf,21:30,27:238,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{26:[1,239],61:$Vv,63:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI},o($Ve,[2,23]),o($VK,[2,67]),{24:[1,240]},o($Ve,[2,11]),o($Ve,[2,12]),{18:[2,27]},{43:[1,241]},o($Ve,[2,18]),o($Ve,[2,19]),{16:$V2,17:$Vf,21:30,27:242,33:16,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{26:$VN,33:130,39:243,85:129,86:$VO,92:$Vc},{22:[1,244]},o($Ve,[2,94],{89:195,37:245,90:$VV,91:$VW}),{26:[1,246]},o([18,41,45],[2,24]),o($Ve,[2,93]),{17:[1,247]},{4:71,6:3,9:248,11:19,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,32:$V7,33:16,36:$V8,38:$V9,47:15,48:$Va,49:$Vb,53:17,60:18,92:$Vc},{18:[1,249]},o([12,13,18],[2,29])],
defaultActions: {24:[2,1],178:[2,85],180:[2,4],185:[2,89],197:[2,92],199:[2,82],205:[2,6],219:[2,91],235:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 82
break;
case 2:return 83
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "implements"
break;
case 9:return "private"
break;
case 10:return "static"
break;
case 11:return "if"
break;
case 12:return "do"
break;
case 13:return "elseif"
break;
case 14:return "else"
break;
case 15:return "return"
break;
case 16:return "as"
break;
case 17:return "while"
break;
case 18:return "break"
break;
case 19:return "switch"
break;
case 20:return "default"
break;
case 21:return "case"
break;
case 22:return "foreach"
break;
case 23:return "for"
break;
case 24:return 87
break;
case 25:return 35
break;
case 26:return 78
break;
case 27:return 22
break;
case 28:return 42
break;
case 29:return 67
break;
case 30:return 86
break;
case 31:return 66
break;
case 32:return '|'
break;
case 33:return 72
break;
case 34:return 73
break;
case 35:return 70
break;
case 36:return 71
break;
case 37:return 69
break;
case 38:return 68
break;
case 39:return 50
break;
case 40:return 58
break;
case 41:return 76
break;
case 42:return 59
break;
case 43:return 77
break;
case 44:return 57
break;
case 45:return 55
break;
case 46:return 75
break;
case 47:return 54
break;
case 48:return 56
break;
case 49:return 74
break;
case 50:return 64
break;
case 51:return 61
break;
case 52:return '^'
break;
case 53:return 63
break;
case 54:return 17
break;
case 55:return 18
break;
case 56:return 88
break;
case 57:return 51
break;
case 58:return 52
break;
case 59:return 24
break;
case 60:return 26
break;
case 61:return 16
break;
case 62:return 5
break;
case 63:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}